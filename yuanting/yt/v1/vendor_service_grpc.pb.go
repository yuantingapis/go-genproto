// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package yt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// VendorServiceClient is the client API for VendorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VendorServiceClient interface {
	GetVendor(ctx context.Context, in *GetVendorRequest, opts ...grpc.CallOption) (*Vendor, error)
}

type vendorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVendorServiceClient(cc grpc.ClientConnInterface) VendorServiceClient {
	return &vendorServiceClient{cc}
}

func (c *vendorServiceClient) GetVendor(ctx context.Context, in *GetVendorRequest, opts ...grpc.CallOption) (*Vendor, error) {
	out := new(Vendor)
	err := c.cc.Invoke(ctx, "/yuanting.yt.v1.VendorService/GetVendor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VendorServiceServer is the server API for VendorService service.
// All implementations must embed UnimplementedVendorServiceServer
// for forward compatibility
type VendorServiceServer interface {
	GetVendor(context.Context, *GetVendorRequest) (*Vendor, error)
	mustEmbedUnimplementedVendorServiceServer()
}

// UnimplementedVendorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVendorServiceServer struct {
}

func (UnimplementedVendorServiceServer) GetVendor(context.Context, *GetVendorRequest) (*Vendor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVendor not implemented")
}
func (UnimplementedVendorServiceServer) mustEmbedUnimplementedVendorServiceServer() {}

// UnsafeVendorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VendorServiceServer will
// result in compilation errors.
type UnsafeVendorServiceServer interface {
	mustEmbedUnimplementedVendorServiceServer()
}

func RegisterVendorServiceServer(s grpc.ServiceRegistrar, srv VendorServiceServer) {
	s.RegisterService(&_VendorService_serviceDesc, srv)
}

func _VendorService_GetVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVendorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorServiceServer).GetVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuanting.yt.v1.VendorService/GetVendor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorServiceServer).GetVendor(ctx, req.(*GetVendorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VendorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yuanting.yt.v1.VendorService",
	HandlerType: (*VendorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVendor",
			Handler:    _VendorService_GetVendor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yuanting/yt/v1/vendor_service.proto",
}
